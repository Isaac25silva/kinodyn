#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass IEEEtran
\begin_preamble
\usepackage[T1]{fontenc}
\usepackage{pslatex}
\end_preamble
\options letterpaper, 10pt, conference
\use_default_options true
\begin_modules
linguistics
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\at}[1]{}
{\left.#1\right|}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
To print with comments: http://wiki.lyx.org/Tips/ExportWithCommentsIncluded:
 
\end_layout

\begin_layout Plain Layout
In LyX >= 2.0.0 you can convert all notes by pressing Alt-X to get a little
 command window and running the function
\end_layout

\begin_layout Plain Layout
inset-forall Note inset-modify note Note Greyedout 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Generalized Motion Planning for Dynamical Systems
\end_layout

\begin_layout Abstract
We propose a method for finding probabilistically optimal control trajectories
 for dynamical systems with differentiable dynamics and differentiable cost
 function.
 The method consists of the RRT* sample-based motion planning algorithm
 with a heuristic motivated by linear control system theory.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Recently, RRT, a sampling-based, probablistically complete motion planning
 algorithm was extended to RRT* which provides probabilistic optimality.
 It is straightforward to apply RRT* to kinematic motion planning problems
 and the this is typically the state-of-the-art solution.
 For problems with differential constraints the application is not so straightfo
rward -- some of the primitives require domain-specific design.
 We present a method that works well across many domains with differential
 constraints.
 Contribution also includes code
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Explain the distinction between general differential constraints and kinodynamic
 constraints
\end_layout

\end_inset


\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
RRT*
\end_layout

\begin_layout Standard
The RRT* algorithm is a sample-based motion planner to finds probabalistically
 optimal solutions.
 It requires the following algorithmic primitives:
\end_layout

\begin_layout Standard
Steer: 
\begin_inset Formula $ $
\end_inset


\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{State}\, s_{\mbox{to}}\right)\mapsto\mbox{Action }a$
\end_inset

 where 
\begin_inset Formula $a$
\end_inset

 is an action that can be applied in 
\begin_inset Formula $s_{\mbox{from}}$
\end_inset

 in order to get to 
\begin_inset Formula $s_{\mbox{to}}$
\end_inset


\end_layout

\begin_layout Standard
Distance: 
\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{State}\, s_{\mbox{to}}\right)\mapsto\mbox{Cost }c$
\end_inset

 where 
\begin_inset Formula $c$
\end_inset

 is the cost of getting from 
\begin_inset Formula $s_{\mbox{from}}$
\end_inset

 to 
\begin_inset Formula $s_{\mbox{to}}$
\end_inset

 without obstacles
\end_layout

\begin_layout Standard
CollisionFree: 
\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{State}\, s_{\mbox{to}}\right)\mapsto\mbox{StateTraj }\left\langle s_{1},\cdots,s_{T}\right\rangle $
\end_inset


\end_layout

\begin_layout Subsection
Modifications to Primitives
\end_layout

\begin_layout Standard
Modification
\end_layout

\begin_layout Standard
Steer: 
\begin_inset Formula $ $
\end_inset


\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{State}\, s_{\mbox{to}}\right)\mapsto\mbox{Action }a$
\end_inset

 where 
\begin_inset Formula $a$
\end_inset

 is an action that can be applied in 
\begin_inset Formula $s_{\mbox{from}}$
\end_inset

 in order to get to 
\begin_inset Formula $s_{\mbox{to}}$
\end_inset


\end_layout

\begin_layout Standard
Distance: 
\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{State}\, s_{\mbox{to}}\right)\mapsto\mbox{Cost }c$
\end_inset

 where 
\begin_inset Formula $c$
\end_inset

 is the cost of getting from 
\begin_inset Formula $s_{\mbox{from}}$
\end_inset

 to 
\begin_inset Formula $s_{\mbox{to}}$
\end_inset

 without obstacles
\end_layout

\begin_layout Standard
CollisionFree: 
\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{Action}\, a\right)\mapsto\mbox{StateTraj }\left\langle s_{1},\cdots,s_{T}\right\rangle ,\mbox{ActionTraj }\left\langle a_{0},\cdots,a_{T-1}\right\rangle $
\end_inset

 where 
\begin_inset Formula $ $
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\left\langle s_{1},\cdots,s_{T}\right\rangle $
\end_inset

 is a trajectory of states arising from taking 
\begin_inset Formula $a$
\end_inset

 from 
\begin_inset Formula $s_{\mbox{from}}$
\end_inset

 until hitting an obstacle or completing the action and 
\begin_inset Formula $\left\langle a_{0},\cdots,a_{T-1}\right\rangle $
\end_inset

 is a decomposition of 
\begin_inset Formula $a$
\end_inset

 that corresponds to the state trajectory.
 
\end_layout

\begin_layout Standard
Cost: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\left(\mbox{State}\, s_{\mbox{from}},\mbox{Action}\, a\right)\mapsto\mbox{Cost }c$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

extend(x_rand):
\end_layout

\begin_layout Plain Layout

	x_nearest = argmin over all nodes n Distance(n,x_rand)
\end_layout

\begin_layout Plain Layout

	d = Distance(x_near,x_rand)
\end_layout

\begin_layout Plain Layout

	if d is infinite: return
\end_layout

\begin_layout Plain Layout

	action = Steer(x_nearest,x_rand)
\end_layout

\begin_layout Plain Layout

	x_path = CollisionFree(x_nearest,action)
\end_layout

\begin_layout Plain Layout

	x_new = last state in x_path list
\end_layout

\begin_layout Plain Layout

	X_near = nodes within ball centered at x_new (according to Distance)
\end_layout

\begin_layout Plain Layout

	for x in X_near:
\end_layout

\begin_layout Plain Layout

		action = Steer(x,x_new)
\end_layout

\begin_layout Plain Layout

		x_path,u_path = CollisionFree(x,action)
\end_layout

\begin_layout Plain Layout

		this_cost = sum(Cost(x,u) for (x,u) in (x_path,u_path))
\end_layout

\begin_layout Plain Layout

		find cheapest this_cost
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The changes to the primitives do not logically change the RRT* algorithm,
 but instead make it easier to plug-in the contributed components.
\end_layout

\begin_layout Subsection
Math Tools
\end_layout

\begin_layout Standard
Linear Quadratic Regulator (LQR) is an optimal control technique which determine
s the policy (mapping from state to action) for a linear dynamical system
 which minimizes a quadratic functional on the state and action.
\end_layout

\begin_layout Standard
LQR is used to solve the following problem: 
\end_layout

\begin_layout Standard
Find 
\begin_inset Formula $\left\langle u_{0},\cdots u_{T-1}\right\rangle $
\end_inset

 such that 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
x_{k+1}=Ax_{k}+Bu_{k}
\]

\end_inset


\end_layout

\begin_layout Standard
minimizing 
\begin_inset Formula 
\[
J\left(x,u\right)=\sum_{k=0}^{T-1}\left(x_{k}^{T}Qx_{k}+u_{k}^{T}Ru_{k}\right)+x_{T}^{T}Q_{T}x_{T}
\]

\end_inset


\end_layout

\begin_layout Standard
given 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $R$
\end_inset

, 
\begin_inset Formula $x_{0}$
\end_inset

,
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
 
\begin_inset Formula $x_{T}$
\end_inset

, and 
\begin_inset Formula $T$
\end_inset

.
\end_layout

\begin_layout Standard
We can enforce that LQR policies obey the final-value constraint on 
\begin_inset Formula $x_{T}$
\end_inset

 by placing very high cost (practically infinite) on the 
\begin_inset Formula $Q_{T}$
\end_inset

 fed to the finite-horizon LQR solver.
 The textbook LQR problem statement requires that the quadratic bowl 
\begin_inset Formula $x^{T}Qx$
\end_inset

 be centered at 
\begin_inset Formula $x=0$
\end_inset

.
 A shift of coordinates can change the center of all bowls, which is not
 what we want.
\end_layout

\begin_layout Standard
We can enrich the class of LQR problems to have arbitrary second-order penalty
 (along with first-order dynamics, which will be essential later) by considering
 the follwing transformation:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula 
\begin{align*}
\underbrace{\left[\begin{matrix}x_{k+1}\\
1
\end{matrix}\right]}_{\hat{x}_{k+1}} & =\underbrace{\left(\begin{matrix}A & c-R^{-1}r\\
0 & 1
\end{matrix}\right)}_{\hat{A}}\underbrace{\left[\begin{matrix}x_{k}\\
1
\end{matrix}\right]}_{\hat{x}_{k}}+\underbrace{\left(\begin{matrix}B\\
0
\end{matrix}\right)}_{\hat{B}}\hat{u}_{k}\\
J\left(x,u\right) & =\sum_{k=0}^{T-1}\hat{x}_{k}^{T}\hat{Q}\hat{x}_{k}+\hat{u}_{k}^{T}R\hat{u}_{k}+\hat{x}_{T}^{T}\hat{Q}_{T}\hat{x}_{T}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\hat{u}_{k}=u_{k}+R^{-1}r$
\end_inset

 and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\hat{Q}=\left(\begin{matrix}Q & q\\
q^{T} & d
\end{matrix}\right)$
\end_inset

 .
 
\end_layout

\begin_layout Standard
Here we augment the state vector with an additional dimension whose value
 is constrained by the dynamics to remain constant.
 As long as this additional dimension is unity in 
\begin_inset Formula $x_{0}$
\end_inset

 , then it will be unity along all trajectories.
\end_layout

\begin_layout Standard
In addition to allowing first-order dynamics (increasing the class of systems
 from linear to affine), this transformation also allows an arbitrary second-ord
er function on 
\begin_inset Formula $x$
\end_inset

 and 
\begin_inset Formula $u$
\end_inset

.
 For example, say we want the following bowl:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(x-x_{0}\right)^{T}Q\left(x-x_{0}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Then choose 
\begin_inset Formula $\hat{Q}=\left(\begin{array}{cc}
Q & Qx_{0}\\
x_{0}^{T}Q & x_{0}^{T}Qx_{0}
\end{array}\right)$
\end_inset

.
\end_layout

\begin_layout Section
Application to a constrainted Linear System with Quadratic Cost 
\end_layout

\begin_layout Standard
Necessary since in general, not possible or practical for steer function
 to be exact.
 
\end_layout

\begin_layout Standard
Logically equivalent to common formulation of RRT*, but easier to plug in
 the primitives.
\end_layout

\begin_layout Standard
Algorithm detailing the different structure here 
\end_layout

\begin_layout Standard
For this class of systems, the LQR method is the standard way to find optimal
 solution.
 LQR, though, cannot handle constaints on the state nor on actuation.
\end_layout

\begin_layout Standard
We can use LQR in the distance metric calculation.
\end_layout

\begin_layout Subsection
Augmenting State with Time
\end_layout

\begin_layout Standard
Augmenting time in the RRT* state space allows us to set explicit time goals
 and allows us to apply the LQR heuristic.
 Without this, it's not clear what the cost between two states should be.
 Penalizing time is not correct.
 Lowest cost over all possible time horizons not correct.
 These are crucial points.
\end_layout

\begin_layout Standard
Many scenarios include time in the state anyway.
 For example: time-varying dynamics or obstacles and constraints.
 
\end_layout

\begin_layout Standard
Introduce notation especially with time dimension.
 For LQR math to look good, need easy notational access to state-space component
 and time component of the RRT state vector.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $\left\langle x,k\right\rangle \in\mathbb{R}^{n}\times\mathbb{Z}_{0+}$
\end_inset

 be the space of the RRT state.
\end_layout

\begin_layout Subsubsection
Primitives
\end_layout

\begin_layout Standard
Algorithm for all primitives
\end_layout

\begin_layout Standard
\begin_inset Formula $Steer(s_{1},s_{2})$
\end_inset

 
\begin_inset Formula $T=k\left(s_{2}\right)-k\left(s_{1}\right)$
\end_inset

 LQR around 
\begin_inset Formula $x\left(s_{1}\right)$
\end_inset

 with goal 
\begin_inset Formula $x\left(s_{2}\right)$
\end_inset

 
\end_layout

\begin_layout Standard
Explain what happens if 
\begin_inset Formula $T\leq0$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Optimality Proof Sketch
\end_layout

\begin_layout Section
Application to General Dynamical Systems
\end_layout

\begin_layout Standard
Consider a discrete-time dynamical system in the form 
\begin_inset Formula 
\begin{equation}
x_{k+1}=f\left(x_{k},u_{k}\right)\label{eq:dynamics}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
with additive cost function
\begin_inset Formula 
\begin{equation}
J\left(\mathbf{u},\mathbf{x}\right)=\sum_{k=0}^{T}g\left(x_{k},u_{k}\right)\label{eq:cost_functional}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
and starting point 
\begin_inset Formula $x_{0}$
\end_inset

.
 The state vector, 
\begin_inset Formula $x$
\end_inset

, is 
\begin_inset Formula $n$
\end_inset

-dimensional and the control vector, 
\begin_inset Formula $u$
\end_inset

, is 
\begin_inset Formula $m$
\end_inset

-dimensional.
 We aim to find a sequence 
\begin_inset Formula $ $
\end_inset


\begin_inset Formula $\mathbf{u}=\left\{ u_{0},\cdots,u_{T}\right\} $
\end_inset

 which induces a trajectory 
\begin_inset Formula $\mathbf{x}=\left\{ x_{1},\cdots,x_{T}\right\} $
\end_inset

 satisfying the dynamics (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dynamics"

\end_inset

) such that 
\begin_inset Formula $ $
\end_inset


\begin_inset Formula $C$
\end_inset

 is minimized according to (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cost_functional"

\end_inset

).
\end_layout

\begin_layout Standard
The real cost of moving from point 
\begin_inset Formula $x'$
\end_inset

 to 
\begin_inset Formula $x''$
\end_inset

 is
\begin_inset Formula 
\begin{multline*}
C\left(x,x'\right)=\min_{\mathbf{u}}J\left(\mathbf{u},\mathbf{x}\right)\\
\mbox{subject to (\ensuremath{\ref{eq:dynamics}}), \ensuremath{x_{0}=x}, \ensuremath{x_{T}=x'}}
\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Note that the minimization happens over control sequences 
\begin_inset Formula $\mathbf{u}$
\end_inset

 of a fixed time lengths, according to 
\end_layout

\begin_layout Standard
We approximate 
\begin_inset Formula $C\left(x',x''\right)$
\end_inset

 by taking a first-order approximation of the dynamics and a second-order
 approximation of the cost and applying LQR control.
 In general, the approximated dynamics and cost are of the following form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align}
x_{k+1} & \approx Ax_{k}+Bu_{k}+c\label{eq:dynamics_approx}\\
J\left(\mathbf{u},\mathbf{x}\right) & \approx\sum_{k=0}^{T}x_{k}^{T}Qx_{k}+u_{k}^{T}Ru_{k}+2q^{T}x_{k}+2r^{T}u_{k}+d\label{eq:cost_approx}
\end{align}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $Q$
\end_inset

 are 
\begin_inset Formula $n\times n$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

 is 
\begin_inset Formula $m\times n$
\end_inset

, 
\begin_inset Formula $R$
\end_inset

 is 
\begin_inset Formula $n\times n$
\end_inset

.
 
\begin_inset Formula $c$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

 are 
\begin_inset Formula $n\times1$
\end_inset

, 
\begin_inset Formula $r$
\end_inset

 is 
\begin_inset Formula $m\times1$
\end_inset

 and 
\begin_inset Formula $d$
\end_inset

 is a scalar.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
A & =\left.\frac{\partial f}{\partial x}\right|_{x^{*},u^{*}}\\
B & =\left.\frac{\partial f}{\partial u}\right|_{x^{*},u^{*}}\\
c & =-Ax^{*}-Bu^{*}+f\left(x^{*},u^{*}\right)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $x^{*}$
\end_inset

, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $u^{*}$
\end_inset

 is the point about which the linearization is performed.
 Typically 
\begin_inset Formula $u^{*}$
\end_inset

 is taken to be 
\begin_inset Formula $\mathbf{0}$
\end_inset

 and 
\begin_inset Formula $x^{*}=x'$
\end_inset


\end_layout

\begin_layout Standard
Equations 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dynamics_approx"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cost_approx"

\end_inset

 are the truncated Taylor expansions of 
\begin_inset Formula $f$
\end_inset

 and 
\begin_inset Formula $g$
\end_inset

.
 The dynamics 
\begin_inset Formula $f$
\end_inset

 must be once-differentiable and addition cost 
\begin_inset Formula $g$
\end_inset

 must be twice-differentiable.
\end_layout

\begin_layout Subsection
Reduction to the Previous Problem
\end_layout

\begin_layout Standard
It is possible to transform the problem specified with 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:dynamics_approx"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:cost_approx"

\end_inset

 into LQR form (where there is only an 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $R$
\end_inset

 matrix) using the following:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula 
\begin{align*}
\underbrace{\left[\begin{matrix}x_{k+1}\\
1
\end{matrix}\right]}_{\hat{x}_{k+1}} & =\underbrace{\left(\begin{matrix}A & c-R^{-1}r\\
0 & 1
\end{matrix}\right)}_{\hat{A}}\underbrace{\left[\begin{matrix}x_{k}\\
1
\end{matrix}\right]}_{\hat{x}_{k}}+\underbrace{\left(\begin{matrix}B\\
0
\end{matrix}\right)}_{\hat{B}}\hat{u}_{k}\\
C\left(\mathbf{u},\mathbf{x}\right) & =\sum_{k=0}^{T}\hat{x}_{k}^{T}\hat{Q}\hat{x}_{k}+\hat{u}_{k}^{T}R\hat{u}_{k}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $\hat{u}_{k}=u_{k}+R^{-1}r$
\end_inset

 and 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\hat{Q}=\left(\begin{matrix}Q & q\\
q^{T} & d
\end{matrix}\right)$
\end_inset

 .
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
\begin_inset Formula $\left(\begin{matrix}x\\
1
\end{matrix}\right)^{T}\left(\begin{matrix}Q & q\\
q^{T} & \eta_{1}
\end{matrix}\right)\left(\begin{matrix}x\\
1
\end{matrix}\right)=\left(\begin{matrix}x\\
1
\end{matrix}\right)^{T}\left(\begin{matrix}Qx+q\\
q^{T}x+\eta_{1}
\end{matrix}\right)=x^{T}Qx+x^{T}q+q^{T}x+d$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Formula $\hat{A}$
\end_inset

, 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\hat{B}$
\end_inset

, 
\begin_inset Formula $\hat{Q}$
\end_inset

, and 
\begin_inset Formula $R$
\end_inset

 matrices specify a linear dynamical system with quadratic costs to which
 an optimal solution can be found with LQR.
 
\end_layout

\begin_layout Subsection
Nuances and Subtleties
\end_layout

\begin_layout Subsubsection
Non-exact steering
\end_layout

\begin_layout Standard
rewiring and propagating dynamics
\end_layout

\begin_layout Subsubsection
Uncontrollable Dynamics
\end_layout

\begin_layout Standard
The linearized system may be uncontrollable -- the 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 matrices are such that it's not possible to control all the modes of the
 system.
 This is the case, for example, for a cart with two inverted pendulums of
 the same length linearized about the upward-pointing fixed point.
 The control input to the system affects both linearized pendulums in the
 same way, so it's not possible to independently stabilize them.
 For the infinite-horizon LQR control problem, there is no solution.
 For the finite-horizon problem, there is a solution, though it might not
 be possible to go to any arbitrary location.
 If the system linearized at 
\begin_inset Formula $x'$
\end_inset

 cannot reach 
\begin_inset Formula $x''$
\end_inset

, then 
\begin_inset Formula $C\left(x',x''\right)$
\end_inset

 needs to be defined in another way.
\end_layout

\begin_layout Standard
is Therefore using the LQR cost metric cannot approximate the cost 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Typical RTT* the cost metric is an underestimate of the true cost, since
 the metric does not take into consideration obstacles.
 The true cost, for example, might be infinite if there is no feasible path,
 but the Euclidian metric will always be finite.
\end_layout

\begin_layout Plain Layout
If the system is uncontrollable as is linearized by a single point, then
 the LQR cost will be infinite while the true cost is not.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Indefinite Cost
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
What if 
\begin_inset Formula $\hat{Q}$
\end_inset

 is indefinite? 
\end_layout

\begin_layout Plain Layout
Options:
\end_layout

\begin_layout Plain Layout
1.
 Use sequential QP techniques like shifting eigenvalues to make 
\begin_inset Formula $\hat{Q}$
\end_inset

 definite.
 
\end_layout

\begin_layout Plain Layout
http://www.cs.berkeley.edu/~pabbeel/cs287-fa11/slides/NonlinearOptimizationForOptim
alControl.pdf (Page 11 bottom slide)
\end_layout

\begin_layout Plain Layout
2.
 LQR with indefnite weighting matrices
\end_layout

\begin_layout Plain Layout
Chapter 9 of:
\end_layout

\begin_layout Plain Layout
http://epubs.siam.org.libproxy.mit.edu/doi/book/10.1137/1.9781611970760
\end_layout

\begin_layout Plain Layout
(same book) 
\end_layout

\begin_layout Plain Layout
http://books.google.com/books?id=bD_83idGZ2cC&lpg=PA211&ots=q3U7u4rmNc&dq=indefini
te%20LQR&pg=PA211#v=onepage&q&f=false
\end_layout

\begin_layout Plain Layout
http://www.tandfonline.com/doi/abs/10.1080/00207178408933184#preview
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Actuation Constraints
\end_layout

\begin_layout Standard
The LQR framework does not permit actuation constraints.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Say the LQR solution returns a control action 
\begin_inset Formula $u\not\in\mathcal{U}$
\end_inset

 (the set of permitted actions).
 Simply choosing a 
\begin_inset Formula $u'=\alpha u$
\end_inset

 such that 
\begin_inset Formula $u'\in\mathcal{U}$
\end_inset

 while minimizing 
\begin_inset Formula $\alpha^{2}$
\end_inset

 (so that 
\begin_inset Formula $u'$
\end_inset

 is close to 
\begin_inset Formula $u$
\end_inset

) intuitively will not explore the space as desired -- the state won't move
 along the same direction in general.
\end_layout

\begin_layout Plain Layout
To clarify:
\end_layout

\begin_layout Plain Layout
if the state of the system is 
\begin_inset Formula $x_{k}$
\end_inset

, then the next state is 
\begin_inset Formula $x_{k+1}=Ax_{k}+Bu$
\end_inset

, which presumably moves the system toward 
\begin_inset Formula $x_{rand}$
\end_inset

.
 The state 
\begin_inset Formula $x_{k+1}'=Ax_{k}+Bu'$
\end_inset

 does not, in general, move the system directly toward 
\begin_inset Formula $x_{rand}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Asymmetric Cost
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
http://math.stackexchange.com/a/23397/2256
\end_layout

\end_inset


\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
vdB 
\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Subsection
Linear Domain
\end_layout

\begin_layout Standard
spaceship no orientation
\end_layout

\begin_layout Subsection
Non-linear Domain
\end_layout

\begin_layout Standard
spaceship orientation
\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
Quick mention of performance (or not).
 Picture of tree, cost over iteration
\end_layout

\begin_layout Section
Discussion and Conclusion and Future Work
\end_layout

\begin_layout Standard
Code available.
 Spatial Data structure future
\end_layout

\begin_layout Section
Acknowledgments
\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
